import React, { useState, useEffect } from 'react';
import api from '../../utils/axiosConfig'; // Importa a instância configurada
import DocumentCardComponent from '../../components/DocumentCardComponent';
import Header from '../../components/Header'; // Importa o Header
import { useRouter } from 'next/router';
import { AxiosError } from 'axios'; // Certifique-se de importar AxiosError

interface Document {
  id: string;
  user_id: string;
  doc_type: string;
  filename: string;
  created_at: string;
  content: string; // Adicione este campo se necessário para exibir o conteúdo do documento
}

const DocumentsPage: React.FC = () => {
  const router = useRouter();

  const [documents, setDocuments] = useState<Document[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.get('/api/documents'); // Supondo que a rota da API seja `/api/documents`
        setDocuments(response.data.documents || []);
        setError(null);
      } catch (error) {
        if (error instanceof AxiosError) {
          setError(`Error fetching documents: ${error.message}`);
        } else {
          setError('Unknown error occurred');
        }
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleAddDocument = () => {
    router.push('/documents/add-document'); // Atualize a rota para adicionar um documento
  };

  const handleEdit = (id: string) => {
    router.push(`/documents/edit-document?id=${id}`); // Atualize a rota para edição de um documento
  };

  const handleDelete = async (id: string) => {
    if (confirm('Are you sure you want to delete this document?')) {
      try {
        await api.delete(`/api/documents/${id}`);
        setDocuments(documents.filter(document => document.id !== id));
        alert('Document deleted successfully');
      } catch (error) {
        if (error instanceof AxiosError) {
          alert(`Error deleting document: ${error.message}`);
        } else {
          alert('Error deleting document: Unknown error');
        }
      }
    }
  };

  return (
    <div className="flex flex-col h-screen">
      <Header /> {/* Adiciona o Header */}
      <main className="flex-1 overflow-y-auto bg-gray-100 p-4">
        <div className="flex items-center justify-between mb-4">
          <p className="text-gray-800 font-semibold">Documentos</p>
          <button
            onClick={handleAddDocument}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
          >
            Add Document
          </button>
        </div>
        {loading ? (
          <p className="text-center text-gray-600">Loading...</p>
        ) : error ? (
          <p className="text-center text-red-600">{error}</p>
        ) : (
          <div className="space-y-4">
            {documents.length > 0 ? (
              documents.map((document) => (
                <DocumentCardComponent
                  key={document.id}
                  document={document}
                  onEdit={handleEdit}
                  onDelete={handleDelete}
                />
              ))
            ) : (
              <p className="text-center text-gray-600">No documents available</p>
            )}
          </div>
        )}
      </main>
    </div>
  );
};

export default DocumentsPage;
